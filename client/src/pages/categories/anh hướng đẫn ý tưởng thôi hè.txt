anh hướng đẫn ý tưởng thôi hè

1. mình sẽ sử dụng cái lib react-paginate.
2. ý tưởng:
    - khi click number page. -> url will change -> 
        hint:   + dùng history(react-router-dom) để push. -> change params query. (?page=...) 


        vậy xong rồi. 





        nhuwgnx cái đăng sau dấu phẩy, trong react gọi là search

        có 2 cách. push
        dùng history.push(`?page=${numberPage}`)
        dùng history.push({search: `?page=${numberPage}`})

        khi minhf push cái search. thì cái location.search sẽ change. 

        khi nó change thì  useEffect -> call

ok giờ a viết api call chapters. em gọi api thôi. dạ anh. ok a out he, có gì hỏi hỉ. a code xong cái nhắn. em pul về thì được.


import React, { useState, useEffect } from 'react';
import axios from 'axios';
import ReactPaginate from 'react-paginate';
import { Router, withRouter } from "react-router";



const Category = (props) => {
    const [isLoading, setLoading] = useState(false); //State for the loading indicator
    const startLoading = () => setLoading(true);
    const stopLoading = () => setLoading(false);

    /*
        Posts fetching happens after page navigation, 
        so we need to switch Loading state on Router events.
    */
    useEffect(() => { //After the component is mounted set router event handlers
        Router.events.on('routeChangeStart', startLoading);
        Router.events.on('routeChangeComplete', stopLoading);

        return () => {
            Router.events.off('routeChangeStart', startLoading);
            Router.events.off('routeChangeComplete', stopLoading);
        }
    }, [])

    //When new page selected in paggination, we take current path and query parrams.
    // Then add or modify page parram and then navigate to the new route.
    const pagginationHandler = (page) => {
        const currentPath = props.router && props.router.pathname;
        const currentQuery = props.router && props.router.query;
        currentQuery.page = page.selected + 1;

        props.router.push({
            pathname: currentPath,
            query: currentQuery,
        });

    };

    //Conditional rendering of the posts list or loading indicator
    let content = null;
    if (isLoading)
        content = <div>Loading...</div>;
    else {
        //Generating posts list
        content = (
            <ul>
                {props.posts && props.posts.map(post => {
                    return <li key={post.id}>{post.title}</li>;
                })}
            </ul>
        );
    }

    return (
        <div className="container">
            <h1>Posts List with Pagination in Next.js</h1>
            <div className="posts">
                {content}
            </div>

            <ReactPaginate
                previousLabel={'previous'}
                nextLabel={'next'}
                breakLabel={'...'}
                breakClassName={'break-me'}
                activeClassName={'active'}
                containerClassName={'pagination'}
                subContainerClassName={'pages pagination'}

                initialPage={props.currentPage - 1}
                pageCount={props.pageCount}
                marginPagesDisplayed={2}
                pageRangeDisplayed={5}
                onPageChange={pagginationHandler}
            />
        </div>
    );
};

//Fetching posts in get Intial Props to make the app seo friendly
Category.getInitialProps = async ({ query }) => {
    const page = query.page || 1; //if page empty we request the first page
    const posts = await axios.get(`https://gorest.co.in/public-api/posts?_format=json&access-token=cxzNs8fYiyxlk708IHfveKM1z1xxYZw99fYE&page=${page}`);
    return {
        totalCount: posts.data._meta.totalCount,
        pageCount: posts.data._meta.pageCount,
        currentPage: posts.data._meta.currentPage,
        perPage: posts.data._meta.perPage,
        posts: posts.data.result,
    };
}


export default withRouter(Category);




import React, { Component } from "react";
import axios from 'axios';
import { connect } from "react-redux";
import "./Pagination.css";
import Pagination from "../../components/Pagination";
import ItemChapter from "./ItemChapter"

class GetChapterOfStory extends Component {

    constructor(props) {
        super(props);

        this.state = {
            dataChapter: {},
            startIndex: "",
            endIndex: ""
        };
    }
    componentDidMount() {
        axios.get(`http://localhost:9091/api/stories/${this.props.storyId}/chapters?page=1&limit=5`)
            .then(res => {

                this.setState({ dataChapter: res.data });

            })
        // use chapters: ->  this.state.dataChapter.data
    }



    showChapter = (chapters) => {
        var result = null;
        chapters = this.state.dataChapter.data;
        result = chapters && chapters.map((chapter) => {
            return <ItemChapter key={chapter.index} {...chapter} />;
        });

        return result;
    };


    onChangePage = data => {
        //  const dataChapter = this.state.dataChapter;
        this.setState({
            startIndex: data.startIndex,
            endIndex: data.endIndex
        });
    };

    render() {
        var {
            startIndex,
            endIndex
        } = this.state;
        var rowsPerPage = [1, 2, 3, 4, 5];


        const listChapter = this.state.dataChapter.data;
        rowsPerPage = listChapter && listChapter.slice(startIndex, endIndex + 1);
        console.log(startIndex);
        return (

            <div className="section product_list_mng">
                <div className="container-fluid">
                    <div className="box_product_control mb-15">

                    </div>

                    {this.showChapter(rowsPerPage)}

                    <div className="box_pagination">
                        <div className="row">

                            <div className="col-xs-12 text-center">
                                <Pagination
                                    totalRecords={listChapter && listChapter.length}
                                    pageLimit={5}
                                    initialPage={1}
                                    pagesToShow={5}
                                    onChangePage={this.onChangePage}
                                />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        );
    }
}


const mapStateToProps = state => {
    return {
        products: state.products,
    };
};



export default connect(
    mapStateToProps

)(GetChapterOfStory);


